package stepdefinitions;

import static org.junit.Assert.assertTrue;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import linkedinlearning.cucumbercourse.BillCalculationHelper;

public class ScenarioOutlineSteps {

    int InitialBillAmount;
    double TaxRate;


    @Given("I have a Customer")
    public void i_have_a_Customer() throws InterruptedException {
        System.out.println("I have a customer");
        //  System.setProperty("webdriver.chrome.driver", projectPath + "/driver/chromedriver");
        System.setProperty("webdriver.chrome.driver","C:\\Users\\Admin\\chromedriver.exe");

        ChromeDriver driver = new ChromeDriver();
        driver.get("https://www.speedtest.net/");
        Thread.sleep(15000);
    }

    @Given("user enters intial bill amount as {int}")
    public void user_enters_intial_bill_amount_as(Integer initialBillAmount) {
        //    this.InitialBillAmount = initialBillAmount;
        System.out.println("InitialBillAmount: " + initialBillAmount);
    }

    @Given("Sales Tax Rate is {int} Percent")
    public void sales_Tax_Rate_is_Percent(Integer taxRate) {
        // Write code here that turns the phrase above into concrete actions
        //   this.TaxRate = taxRate;
        System.out.println("Tax Rate: " + taxRate);
    }

    @Then("final bill amount calculated is {int}")
    public void final_bill_amount_calculate_is(Integer expectedValue) {

        System.out.println("Tax Rate: " + expectedValue);

    }

    @Given("Sales Tax Rate is {double} Percent")
    public void sales_Tax_Rate_is_Percent(Double taxRate) {
        this.TaxRate = taxRate;
        System.out.println("Tax Rate: " + taxRate);
    }

    String projectPath = System.getProperty("user.dir");

    private void invokeWebPage(Double expectedValue) throws InterruptedException {
        System.out.println("expectedValue " + expectedValue);


    }

    @Then("final bill amount calculated is {double}")
    public void final_bill_amount_calculate_is(Double expectedValue) throws InterruptedException {
        double SystemCalcValue =
                BillCalculationHelper.CalculateBillForCustomer(this.InitialBillAmount, this.TaxRate);
        System.out.println("Expected Value: " + expectedValue);
        System.out.println("Calculated Value: " + SystemCalcValue);
        assertTrue(expectedValue == SystemCalcValue);
        invokeWebPage(expectedValue);

    }


}
